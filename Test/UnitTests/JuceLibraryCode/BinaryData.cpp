/* ==================================== JUCER_BINARY_RESOURCE ====================================

   This is an auto-generated file: Any edits you make may be overwritten!

*/

namespace BinaryData
{

//================== README.md ==================
static const unsigned char temp_binary_data_0[] =
"# Customization Points\n"
"\n"
"The custom directory is an injection point for custom user configurations.\n"
"\n"
"## Header `gtest.h`\n"
"\n"
"### The following macros can be defined:\n"
"\n"
"*   `GTEST_OS_STACK_TRACE_GETTER_` - The name of an implementation of\n"
"    `OsStackTraceGetterInterface`.\n"
"*   `GTEST_CUSTOM_TEMPDIR_FUNCTION_` - An override for `testing::TempDir()`. See\n"
"    `testing::TempDir` for semantics and signature.\n"
"\n"
"## Header `gtest-port.h`\n"
"\n"
"The following macros can be defined:\n"
"\n"
"### Flag related macros:\n"
"\n"
"*   `GTEST_FLAG(flag_name)`\n"
"*   `GTEST_USE_OWN_FLAGFILE_FLAG_` - Define to 0 when the system provides its\n"
"    own flagfile flag parsing.\n"
"*   `GTEST_DECLARE_bool_(name)`\n"
"*   `GTEST_DECLARE_int32_(name)`\n"
"*   `GTEST_DECLARE_string_(name)`\n"
"*   `GTEST_DEFINE_bool_(name, default_val, doc)`\n"
"*   `GTEST_DEFINE_int32_(name, default_val, doc)`\n"
"*   `GTEST_DEFINE_string_(name, default_val, doc)`\n"
"\n"
"### Logging:\n"
"\n"
"*   `GTEST_LOG_(severity)`\n"
"*   `GTEST_CHECK_(condition)`\n"
"*   Functions `LogToStderr()` and `FlushInfoLog()` have to be provided too.\n"
"\n"
"### Threading:\n"
"\n"
"*   `GTEST_HAS_NOTIFICATION_` - Enabled if Notification is already provided.\n"
"*   `GTEST_HAS_MUTEX_AND_THREAD_LOCAL_` - Enabled if `Mutex` and `ThreadLocal`\n"
"    are already provided. Must also provide `GTEST_DECLARE_STATIC_MUTEX_(mutex)`\n"
"    and `GTEST_DEFINE_STATIC_MUTEX_(mutex)`\n"
"*   `GTEST_EXCLUSIVE_LOCK_REQUIRED_(locks)`\n"
"*   `GTEST_LOCK_EXCLUDED_(locks)`\n"
"\n"
"### Underlying library support features\n"
"\n"
"*   `GTEST_HAS_CXXABI_H_`\n"
"\n"
"### Exporting API symbols:\n"
"\n"
"*   `GTEST_API_` - Specifier for exported symbols.\n"
"\n"
"## Header `gtest-printers.h`\n"
"\n"
"*   See documentation at `gtest/gtest-printers.h` for details on how to define a\n"
"    custom printer.\n";

const char* README_md = (const char*) temp_binary_data_0;

//================== CMakeLists.txt ==================
static const unsigned char temp_binary_data_1[] =
"########################################################################\n"
"# Note: CMake support is community-based. The maintainers do not use CMake\n"
"# internally.\n"
"#\n"
"# CMake build script for Google Test.\n"
"#\n"
"# To run the tests for Google Test itself on Linux, use 'make test' or\n"
"# ctest.  You can select which tests to run using 'ctest -R regex'.\n"
"# For more options, run 'ctest --help'.\n"
"\n"
"# When other libraries are using a shared version of runtime libraries,\n"
"# Google Test also has to use one.\n"
"option(\n"
"  gtest_force_shared_crt\n"
"  \"Use shared (DLL) run-time lib even when Google Test is built as static lib.\"\n"
"  OFF)\n"
"\n"
"option(gtest_build_tests \"Build all of gtest's own tests.\" OFF)\n"
"\n"
"option(gtest_build_samples \"Build gtest's sample programs.\" OFF)\n"
"\n"
"option(gtest_disable_pthreads \"Disable uses of pthreads in gtest.\" OFF)\n"
"\n"
"option(\n"
"  gtest_hide_internal_symbols\n"
"  \"Build gtest with internal symbols hidden in shared libraries.\"\n"
"  OFF)\n"
"\n"
"# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n"
"include(cmake/hermetic_build.cmake OPTIONAL)\n"
"\n"
"if (COMMAND pre_project_set_up_hermetic_build)\n"
"  pre_project_set_up_hermetic_build()\n"
"endif()\n"
"\n"
"########################################################################\n"
"#\n"
"# Project-wide settings\n"
"\n"
"# Name of the project.\n"
"#\n"
"# CMake files in this project can refer to the root source directory\n"
"# as ${gtest_SOURCE_DIR} and to the root binary directory as\n"
"# ${gtest_BINARY_DIR}.\n"
"# Language \"C\" is required for find_package(Threads).\n"
"\n"
"# Project version:\n"
"\n"
"if (CMAKE_VERSION VERSION_LESS 3.0)\n"
"  project(gtest CXX C)\n"
"  set(PROJECT_VERSION ${GOOGLETEST_VERSION})\n"
"else()\n"
"  cmake_policy(SET CMP0048 NEW)\n"
"  project(gtest VERSION ${GOOGLETEST_VERSION} LANGUAGES CXX C)\n"
"endif()\n"
"cmake_minimum_required(VERSION 2.6.4)\n"
"\n"
"if (POLICY CMP0063) # Visibility\n"
"  cmake_policy(SET CMP0063 NEW)\n"
"endif (POLICY CMP0063)\n"
"\n"
"if (COMMAND set_up_hermetic_build)\n"
"  set_up_hermetic_build()\n"
"endif()\n"
"\n"
"# These commands only run if this is the main project\n"
"if(CMAKE_PROJECT_NAME STREQUAL \"gtest\" OR CMAKE_PROJECT_NAME STREQUAL \"googletest-distribution\")\n"
"\n"
"  # BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n"
"  # make it prominent in the GUI.\n"
"  option(BUILD_SHARED_LIBS \"Build shared libraries (DLLs).\" OFF)\n"
"\n"
"else()\n"
"\n"
"  mark_as_advanced(\n"
"    gtest_force_shared_crt\n"
"    gtest_build_tests\n"
"    gtest_build_samples\n"
"    gtest_disable_pthreads\n"
"    gtest_hide_internal_symbols)\n"
"\n"
"endif()\n"
"\n"
"\n"
"if (gtest_hide_internal_symbols)\n"
"  set(CMAKE_CXX_VISIBILITY_PRESET hidden)\n"
"  set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)\n"
"endif()\n"
"\n"
"# Define helper functions and macros used by Google Test.\n"
"include(cmake/internal_utils.cmake)\n"
"\n"
"config_compiler_and_linker()  # Defined in internal_utils.cmake.\n"
"\n"
"# Create the CMake package file descriptors.\n"
"if (INSTALL_GTEST)\n"
"  include(CMakePackageConfigHelpers)\n"
"  set(cmake_package_name GTest)\n"
"  set(targets_export_name ${cmake_package_name}Targets CACHE INTERNAL \"\")\n"
"  set(generated_dir \"${CMAKE_CURRENT_BINARY_DIR}/generated\" CACHE INTERNAL \"\")\n"
"  set(cmake_files_install_dir \"${CMAKE_INSTALL_LIBDIR}/cmake/${cmake_package_name}\")\n"
"  set(version_file \"${generated_dir}/${cmake_package_name}ConfigVersion.cmake\")\n"
"  write_basic_package_version_file(${version_file} VERSION ${GOOGLETEST_VERSION} COMPATIBILITY AnyNewerVersion)\n"
"  install(EXPORT ${targets_export_name}\n"
"    NAMESPACE ${cmake_package_name}::\n"
"    DESTINATION ${cmake_files_install_dir})\n"
"  set(config_file \"${generated_dir}/${cmake_package_name}Config.cmake\")\n"
"  configure_package_config_file(\"${gtest_SOURCE_DIR}/cmake/Config.cmake.in\"\n"
"    \"${config_file}\" INSTALL_DESTINATION ${cmake_files_install_dir})\n"
"  install(FILES ${version_file} ${config_file}\n"
"    DESTINATION ${cmake_files_install_dir})\n"
"endif()\n"
"\n"
"# Where Google Test's .h files can be found.\n"
"set(gtest_build_include_dirs\n"
"  \"${gtest_SOURCE_DIR}/include\"\n"
"  \"${gtest_SOURCE_DIR}\")\n"
"include_directories(${gtest_build_include_dirs})\n"
"\n"
"########################################################################\n"
"#\n"
"# Defines the gtest & gtest_main libraries.  User tests should link\n"
"# with one of them.\n"
"\n"
"# Google Test libraries.  We build them using more strict warnings than what\n"
"# are used for other targets, to ensure that gtest can be compiled by a user\n"
"# aggressive about warnings.\n"
"cxx_library(gtest \"${cxx_strict}\" src/gtest-all.cc)\n"
"set_target_properties(gtest PROPERTIES VERSION ${GOOGLETEST_VERSION})\n"
"cxx_library(gtest_main \"${cxx_strict}\" src/gtest_main.cc)\n"
"set_target_properties(gtest_main PROPERTIES VERSION ${GOOGLETEST_VERSION})\n"
"# If the CMake version supports it, attach header directory information\n"
"# to the targets for when we are part of a parent build (ie being pulled\n"
"# in via add_subdirectory() rather than being a standalone build).\n"
"if (DEFINED CMAKE_VERSION AND NOT \"${CMAKE_VERSION}\" VERSION_LESS \"2.8.11\")\n"
"  target_include_directories(gtest SYSTEM INTERFACE\n"
"    \"$<BUILD_INTERFACE:${gtest_build_include_dirs}>\"\n"
"    \"$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_INCLUDEDIR}>\")\n"
"  target_include_directories(gtest_main SYSTEM INTERFACE\n"
"    \"$<BUILD_INTERFACE:${gtest_build_include_dirs}>\"\n"
"    \"$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_INCLUDEDIR}>\")\n"
"endif()\n"
"target_link_libraries(gtest_main PUBLIC gtest)\n"
"\n"
"########################################################################\n"
"#\n"
"# Install rules\n"
"install_project(gtest gtest_main)\n"
"\n"
"########################################################################\n"
"#\n"
"# Samples on how to link user tests with gtest or gtest_main.\n"
"#\n"
"# They are not built by default.  To build them, set the\n"
"# gtest_build_samples option to ON.  You can do it by running ccmake\n"
"# or specifying the -Dgtest_build_samples=ON flag when running cmake.\n"
"\n"
"if (gtest_build_samples)\n"
"  cxx_executable(sample1_unittest samples gtest_main samples/sample1.cc)\n"
"  cxx_executable(sample2_unittest samples gtest_main samples/sample2.cc)\n"
"  cxx_executable(sample3_unittest samples gtest_main)\n"
"  cxx_executable(sample4_unittest samples gtest_main samples/sample4.cc)\n"
"  cxx_executable(sample5_unittest samples gtest_main samples/sample1.cc)\n"
"  cxx_executable(sample6_unittest samples gtest_main)\n"
"  cxx_executable(sample7_unittest samples gtest_main)\n"
"  cxx_executable(sample8_unittest samples gtest_main)\n"
"  cxx_executable(sample9_unittest samples gtest)\n"
"  cxx_executable(sample10_unittest samples gtest)\n"
"endif()\n"
"\n"
"########################################################################\n"
"#\n"
"# Google Test's own tests.\n"
"#\n"
"# You can skip this section if you aren't interested in testing\n"
"# Google Test itself.\n"
"#\n"
"# The tests are not built by default.  To build them, set the\n"
"# gtest_build_tests option to ON.  You can do it by running ccmake\n"
"# or specifying the -Dgtest_build_tests=ON flag when running cmake.\n"
"\n"
"if (gtest_build_tests)\n"
"  # This must be set in the root directory for the tests to be run by\n"
"  # 'make test' or ctest.\n"
"  enable_testing()\n"
"\n"
"  if (WIN32)\n"
"    file(GENERATE OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/RunTest.ps1\"\n"
"         CONTENT\n"
"\"$project_bin = \\\"${CMAKE_BINARY_DIR}/bin/$<CONFIG>\\\"\n"
"$env:Path = \\\"$project_bin;$env:Path\\\"\n"
"& $args\")\n"
"  elseif (MINGW OR CYGWIN)\n"
"    file(GENERATE OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/RunTest.ps1\"\n"
"         CONTENT\n"
"\"$project_bin = (cygpath --windows ${CMAKE_BINARY_DIR}/bin)\n"
"$env:Path = \\\"$project_bin;$env:Path\\\"\n"
"& $args\")\n"
"  endif()\n"
"\n"
"  ############################################################\n"
"  # C++ tests built with standard compiler flags.\n"
"\n"
"  cxx_test(googletest-death-test-test gtest_main)\n"
"  cxx_test(gtest_environment_test gtest)\n"
"  cxx_test(googletest-filepath-test gtest_main)\n"
"  cxx_test(googletest-listener-test gtest_main)\n"
"  cxx_test(gtest_main_unittest gtest_main)\n"
"  cxx_test(googletest-message-test gtest_main)\n"
"  cxx_test(gtest_no_test_unittest gtest)\n"
"  cxx_test(googletest-options-test gtest_main)\n"
"  cxx_test(googletest-param-test-test gtest\n"
"    test/googletest-param-test2-test.cc)\n"
"  cxx_test(googletest-port-test gtest_main)\n"
"  cxx_test(gtest_pred_impl_unittest gtest_main)\n"
"  cxx_test(gtest_premature_exit_test gtest\n"
"    test/gtest_premature_exit_test.cc)\n"
"  cxx_test(googletest-printers-test gtest_main)\n"
"  cxx_test(gtest_prod_test gtest_main\n"
"    test/production.cc)\n"
"  cxx_test(gtest_repeat_test gtest)\n"
"  cxx_test(gtest_sole_header_test gtest_main)\n"
"  cxx_test(gtest_stress_test gtest)\n"
"  cxx_test(googletest-test-part-test gtest_main)\n"
"  cxx_test(gtest_throw_on_failure_ex_test gtest)\n"
"  cxx_test(gtest-typed-test_test gtest_main\n"
"    test/gtest-typed-test2_test.cc)\n"
"  cxx_test(gtest_unittest gtest_main)\n"
"  cxx_test(gtest-unittest-api_test gtest)\n"
"  cxx_test(gtest_skip_in_environment_setup_test gtest_main)\n"
"  cxx_test(gtest_skip_test gtest_main)\n"
"\n"
"  ############################################################\n"
"  # C++ tests built with non-standard compiler flags.\n"
"\n"
"  # MSVC 7.1 does not support STL with exceptions disabled.\n"
"  if (NOT MSVC OR MSVC_VERSION GREATER 1310)\n"
"    cxx_library(gtest_no_exception \"${cxx_no_exception}\"\n"
"      src/gtest-all.cc)\n"
"    cxx_library(gtest_main_no_exception \"${cxx_no_exception}\"\n"
"      src/gtest-all.cc src/gtest_main.cc)\n"
"  endif()\n"
"  cxx_library(gtest_main_no_rtti \"${cxx_no_rtti}\"\n"
"    src/gtest-all.cc src/gtest_main.cc)\n"
"\n"
"  cxx_test_with_flags(gtest-death-test_ex_nocatch_test\n"
"    \"${cxx_exception} -DGTEST_ENABLE_CATCH_EXCEPTIONS_=0\"\n"
"    gtest test/googletest-death-test_ex_test.cc)\n"
"  cxx_test_with_flags(gtest-death-test_ex_catch_test\n"
"    \"${cxx_exception} -DGTEST_ENABLE_CATCH_EXCEPTIONS_=1\"\n"
"    gtest test/googletest-death-test_ex_test.cc)\n"
"\n"
"  cxx_test_with_flags(gtest_no_rtti_unittest \"${cxx_no_rtti}\"\n"
"    gtest_main_no_rtti test/gtest_unittest.cc)\n"
"\n"
"  cxx_shared_library(gtest_dll \"${cxx_default}\"\n"
"    src/gtest-all.cc src/gtest_main.cc)\n"
"\n"
"  cxx_executable_with_flags(gtest_dll_test_ \"${cxx_default}\"\n"
"    gtest_dll test/gtest_all_test.cc)\n"
"  set_target_properties(gtest_dll_test_\n"
"                        PROPERTIES\n"
"                        COMPILE_DEFINITIONS \"GTEST_LINKED_AS_SHARED_LIBRARY=1\")\n"
"\n"
"  ############################################################\n"
"  # Python tests.\n"
"\n"
"  cxx_executable(googletest-break-on-failure-unittest_ test gtest)\n"
"  py_test(googletest-break-on-failure-unittest)\n"
"\n"
"  py_test(gtest_skip_check_output_test)\n"
"  py_test(gtest_skip_environment_check_output_test)\n"
"\n"
"  # Visual Studio .NET 2003 does not support STL with exceptions disabled.\n"
"  if (NOT MSVC OR MSVC_VERSION GREATER 1310)  # 1310 is Visual Studio .NET 2003\n"
"    cxx_executable_with_flags(\n"
"      googletest-catch-exceptions-no-ex-test_\n"
"      \"${cxx_no_exception}\"\n"
"      gtest_main_no_exception\n"
"      test/googletest-catch-exceptions-test_.cc)\n"
"  endif()\n"
"\n"
"  cxx_executable_with_flags(\n"
"    googletest-catch-exceptions-ex-test_\n"
"    \"${cxx_exception}\"\n"
"    gtest_main\n"
"    test/googletest-catch-exceptions-test_.cc)\n"
"  py_test(googletest-catch-exceptions-test)\n"
"\n"
"  cxx_executable(googletest-color-test_ test gtest)\n"
"  py_test(googletest-color-test)\n"
"\n"
"  cxx_executable(googletest-env-var-test_ test gtest)\n"
"  py_test(googletest-env-var-test)\n"
"\n"
"  cxx_executable(googletest-filter-unittest_ test gtest)\n"
"  py_test(googletest-filter-unittest)\n"
"\n"
"  cxx_executable(gtest_help_test_ test gtest_main)\n"
"  py_test(gtest_help_test)\n"
"\n"
"  cxx_executable(googletest-list-tests-unittest_ test gtest)\n"
"  py_test(googletest-list-tests-unittest)\n"
"\n"
"  cxx_executable(googletest-output-test_ test gtest)\n"
"  py_test(googletest-output-test --no_stacktrace_support)\n"
"\n"
"  cxx_executable(googletest-shuffle-test_ test gtest)\n"
"  py_test(googletest-shuffle-test)\n"
"\n"
"  # MSVC 7.1 does not support STL with exceptions disabled.\n"
"  if (NOT MSVC OR MSVC_VERSION GREATER 1310)\n"
"    cxx_executable(googletest-throw-on-failure-test_ test gtest_no_exception)\n"
"    set_target_properties(googletest-throw-on-failure-test_\n"
"      PROPERTIES\n"
"      COMPILE_FLAGS \"${cxx_no_exception}\")\n"
"    py_test(googletest-throw-on-failure-test)\n"
"  endif()\n"
"\n"
"  cxx_executable(googletest-uninitialized-test_ test gtest)\n"
"  py_test(googletest-uninitialized-test)\n"
"\n"
"  cxx_executable(gtest_list_output_unittest_ test gtest)\n"
"  py_test(gtest_list_output_unittest)\n"
"\n"
"  cxx_executable(gtest_xml_outfile1_test_ test gtest_main)\n"
"  cxx_executable(gtest_xml_outfile2_test_ test gtest_main)\n"
"  py_test(gtest_xml_outfiles_test)\n"
"  py_test(googletest-json-outfiles-test)\n"
"\n"
"  cxx_executable(gtest_xml_output_unittest_ test gtest)\n"
"  py_test(gtest_xml_output_unittest --no_stacktrace_support)\n"
"  py_test(googletest-json-output-unittest --no_stacktrace_support)\n"
"endif()\n";

const char* CMakeLists_txt = (const char*) temp_binary_data_1;

//================== CONTRIBUTORS ==================
static const unsigned char temp_binary_data_2[] =
"# This file contains a list of people who've made non-trivial\n"
"# contribution to the Google C++ Testing Framework project.  People\n"
"# who commit code to the project are encouraged to add their names\n"
"# here.  Please keep the list sorted by first names.\n"
"\n"
"Ajay Joshi <jaj@google.com>\n"
"Bal\xc3\xa1zs D\xc3\xa1n <balazs.dan@gmail.com>\n"
"Bharat Mediratta <bharat@menalto.com>\n"
"Chandler Carruth <chandlerc@google.com>\n"
"Chris Prince <cprince@google.com>\n"
"Chris Taylor <taylorc@google.com>\n"
"Dan Egnor <egnor@google.com>\n"
"Eric Roman <eroman@chromium.org>\n"
"Hady Zalek <hady.zalek@gmail.com>\n"
"Jeffrey Yasskin <jyasskin@google.com>\n"
"J\xc3\xb3i Sigur\xc3\xb0sson <joi@google.com>\n"
"Keir Mierle <mierle@gmail.com>\n"
"Keith Ray <keith.ray@gmail.com>\n"
"Kenton Varda <kenton@google.com>\n"
"Krystian Kuzniarek <krystian.kuzniarek@gmail.com>\n"
"Manuel Klimek <klimek@google.com>\n"
"Markus Heule <markus.heule@gmail.com>\n"
"Mika Raento <mikie@iki.fi>\n"
"Mikl\xc3\xb3s Fazekas <mfazekas@szemafor.com>\n"
"Pasi Valminen <pasi.valminen@gmail.com>\n"
"Patrick Hanna <phanna@google.com>\n"
"Patrick Riley <pfr@google.com>\n"
"Peter Kaminski <piotrk@google.com>\n"
"Preston Jackson <preston.a.jackson@gmail.com>\n"
"Rainer Klaffenboeck <rainer.klaffenboeck@dynatrace.com>\n"
"Russ Cox <rsc@google.com>\n"
"Russ Rufer <russ@pentad.com>\n"
"Sean Mcafee <eefacm@gmail.com>\n"
"Sigur\xc3\xb0ur \xc3\x81sgeirsson <siggi@google.com>\n"
"Tracy Bialik <tracy@pentad.com>\n"
"Vadim Berman <vadimb@google.com>\n"
"Vlad Losev <vladl@google.com>\n"
"Zhanyong Wan <wan@google.com>\n";

const char* CONTRIBUTORS = (const char*) temp_binary_data_2;

//================== LICENSE ==================
static const unsigned char temp_binary_data_3[] =
"Copyright 2008, Google Inc.\n"
"All rights reserved.\n"
"\n"
"Redistribution and use in source and binary forms, with or without\n"
"modification, are permitted provided that the following conditions are\n"
"met:\n"
"\n"
"    * Redistributions of source code must retain the above copyright\n"
"notice, this list of conditions and the following disclaimer.\n"
"    * Redistributions in binary form must reproduce the above\n"
"copyright notice, this list of conditions and the following disclaimer\n"
"in the documentation and/or other materials provided with the\n"
"distribution.\n"
"    * Neither the name of Google Inc. nor the names of its\n"
"contributors may be used to endorse or promote products derived from\n"
"this software without specific prior written permission.\n"
"\n"
"THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n"
"\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n"
"LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n"
"A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n"
"OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n"
"SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n"
"LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n"
"DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n"
"THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n"
"(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n"
"OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n";

const char* LICENSE = (const char*) temp_binary_data_3;

//================== README.md ==================
static const unsigned char temp_binary_data_4[] =
"### Generic Build Instructions\n"
"\n"
"#### Setup\n"
"\n"
"To build Google Test and your tests that use it, you need to tell your build\n"
"system where to find its headers and source files. The exact way to do it\n"
"depends on which build system you use, and is usually straightforward.\n"
"\n"
"### Build with CMake\n"
"\n"
"Google Test comes with a CMake build script\n"
"([CMakeLists.txt](https://github.com/google/googletest/blob/master/CMakeLists.txt))\n"
"that can be used on a wide range of platforms (\"C\" stands for cross-platform.).\n"
"If you don't have CMake installed already, you can download it for free from\n"
"<http://www.cmake.org/>.\n"
"\n"
"CMake works by generating native makefiles or build projects that can be used in\n"
"the compiler environment of your choice. You can either build Google Test as a\n"
"standalone project or it can be incorporated into an existing CMake build for\n"
"another project.\n"
"\n"
"#### Standalone CMake Project\n"
"\n"
"When building Google Test as a standalone project, the typical workflow starts\n"
"with:\n"
"\n"
"    mkdir mybuild       # Create a directory to hold the build output.\n"
"    cd mybuild\n"
"    cmake ${GTEST_DIR}  # Generate native build scripts.\n"
"\n"
"If you want to build Google Test's samples, you should replace the last command\n"
"with\n"
"\n"
"    cmake -Dgtest_build_samples=ON ${GTEST_DIR}\n"
"\n"
"If you are on a \\*nix system, you should now see a Makefile in the current\n"
"directory. Just type 'make' to build gtest.\n"
"\n"
"If you use Windows and have Visual Studio installed, a `gtest.sln` file and\n"
"several `.vcproj` files will be created. You can then build them using Visual\n"
"Studio.\n"
"\n"
"On Mac OS X with Xcode installed, a `.xcodeproj` file will be generated.\n"
"\n"
"#### Incorporating Into An Existing CMake Project\n"
"\n"
"If you want to use gtest in a project which already uses CMake, then a more\n"
"robust and flexible approach is to build gtest as part of that project directly.\n"
"This is done by making the GoogleTest source code available to the main build\n"
"and adding it using CMake's `add_subdirectory()` command. This has the\n"
"significant advantage that the same compiler and linker settings are used\n"
"between gtest and the rest of your project, so issues associated with using\n"
"incompatible libraries (eg debug/release), etc. are avoided. This is\n"
"particularly useful on Windows. Making GoogleTest's source code available to the\n"
"main build can be done a few different ways:\n"
"\n"
"*   Download the GoogleTest source code manually and place it at a known\n"
"    location. This is the least flexible approach and can make it more difficult\n"
"    to use with continuous integration systems, etc.\n"
"*   Embed the GoogleTest source code as a direct copy in the main project's\n"
"    source tree. This is often the simplest approach, but is also the hardest to\n"
"    keep up to date. Some organizations may not permit this method.\n"
"*   Add GoogleTest as a git submodule or equivalent. This may not always be\n"
"    possible or appropriate. Git submodules, for example, have their own set of\n"
"    advantages and drawbacks.\n"
"*   Use CMake to download GoogleTest as part of the build's configure step. This\n"
"    is just a little more complex, but doesn't have the limitations of the other\n"
"    methods.\n"
"\n"
"The last of the above methods is implemented with a small piece of CMake code in\n"
"a separate file (e.g. `CMakeLists.txt.in`) which is copied to the build area and\n"
"then invoked as a sub-build _during the CMake stage_. That directory is then\n"
"pulled into the main build with `add_subdirectory()`. For example:\n"
"\n"
"New file `CMakeLists.txt.in`:\n"
"\n"
"```cmake\n"
"cmake_minimum_required(VERSION 2.8.2)\n"
"\n"
"project(googletest-download NONE)\n"
"\n"
"include(ExternalProject)\n"
"ExternalProject_Add(googletest\n"
"  GIT_REPOSITORY    https://github.com/google/googletest.git\n"
"  GIT_TAG           master\n"
"  SOURCE_DIR        \"${CMAKE_CURRENT_BINARY_DIR}/googletest-src\"\n"
"  BINARY_DIR        \"${CMAKE_CURRENT_BINARY_DIR}/googletest-build\"\n"
"  CONFIGURE_COMMAND \"\"\n"
"  BUILD_COMMAND     \"\"\n"
"  INSTALL_COMMAND   \"\"\n"
"  TEST_COMMAND      \"\"\n"
")\n"
"```\n"
"\n"
"Existing build's `CMakeLists.txt`:\n"
"\n"
"```cmake\n"
"# Download and unpack googletest at configure time\n"
"configure_file(CMakeLists.txt.in googletest-download/CMakeLists.txt)\n"
"execute_process(COMMAND ${CMAKE_COMMAND} -G \"${CMAKE_GENERATOR}\" .\n"
"  RESULT_VARIABLE result\n"
"  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/googletest-download )\n"
"if(result)\n"
"  message(FATAL_ERROR \"CMake step for googletest failed: ${result}\")\n"
"endif()\n"
"execute_process(COMMAND ${CMAKE_COMMAND} --build .\n"
"  RESULT_VARIABLE result\n"
"  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/googletest-download )\n"
"if(result)\n"
"  message(FATAL_ERROR \"Build step for googletest failed: ${result}\")\n"
"endif()\n"
"\n"
"# Prevent overriding the parent project's compiler/linker\n"
"# settings on Windows\n"
"set(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n"
"\n"
"# Add googletest directly to our build. This defines\n"
"# the gtest and gtest_main targets.\n"
"add_subdirectory(${CMAKE_CURRENT_BINARY_DIR}/googletest-src\n"
"                 ${CMAKE_CURRENT_BINARY_DIR}/googletest-build\n"
"                 EXCLUDE_FROM_ALL)\n"
"\n"
"# The gtest/gtest_main targets carry header search path\n"
"# dependencies automatically when using CMake 2.8.11 or\n"
"# later. Otherwise we have to add them here ourselves.\n"
"if (CMAKE_VERSION VERSION_LESS 2.8.11)\n"
"  include_directories(\"${gtest_SOURCE_DIR}/include\")\n"
"endif()\n"
"\n"
"# Now simply link against gtest or gtest_main as needed. Eg\n"
"add_executable(example example.cpp)\n"
"target_link_libraries(example gtest_main)\n"
"add_test(NAME example_test COMMAND example)\n"
"```\n"
"\n"
"Note that this approach requires CMake 2.8.2 or later due to its use of the\n"
"`ExternalProject_Add()` command. The above technique is discussed in more detail\n"
"in [this separate article](http://crascit.com/2015/07/25/cmake-gtest/) which\n"
"also contains a link to a fully generalized implementation of the technique.\n"
"\n"
"##### Visual Studio Dynamic vs Static Runtimes\n"
"\n"
"By default, new Visual Studio projects link the C runtimes dynamically but\n"
"Google Test links them statically. This will generate an error that looks\n"
"something like the following: gtest.lib(gtest-all.obj) : error LNK2038: mismatch\n"
"detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value\n"
"'MDd_DynamicDebug' in main.obj\n"
"\n"
"Google Test already has a CMake option for this: `gtest_force_shared_crt`\n"
"\n"
"Enabling this option will make gtest link the runtimes dynamically too, and\n"
"match the project in which it is included.\n"
"\n"
"#### C++ Standard Version\n"
"\n"
"An environment that supports C++11 is required in order to successfully build\n"
"Google Test. One way to ensure this is to specify the standard in the top-level\n"
"project, for example by using the `set(CMAKE_CXX_STANDARD 11)` command. If this\n"
"is not feasible, for example in a C project using Google Test for validation,\n"
"then it can be specified by adding it to the options for cmake via the\n"
"`DCMAKE_CXX_FLAGS` option.\n"
"\n"
"### Tweaking Google Test\n"
"\n"
"Google Test can be used in diverse environments. The default configuration may\n"
"not work (or may not work well) out of the box in some environments. However,\n"
"you can easily tweak Google Test by defining control macros on the compiler\n"
"command line. Generally, these macros are named like `GTEST_XYZ` and you define\n"
"them to either 1 or 0 to enable or disable a certain feature.\n"
"\n"
"We list the most frequently used macros below. For a complete list, see file\n"
"[include/gtest/internal/gtest-port.h](https://github.com/google/googletest/blob/master/googletest/include/gtest/internal/gtest-port.h).\n"
"\n"
"### Multi-threaded Tests\n"
"\n"
"Google Test is thread-safe where the pthread library is available. After\n"
"`#include \"gtest/gtest.h\"`, you can check the\n"
"`GTEST_IS_THREADSAFE` macro to see whether this is the case (yes if the macro is\n"
"`#defined` to 1, no if it's undefined.).\n"
"\n"
"If Google Test doesn't correctly detect whether pthread is available in your\n"
"environment, you can force it with\n"
"\n"
"    -DGTEST_HAS_PTHREAD=1\n"
"\n"
"or\n"
"\n"
"    -DGTEST_HAS_PTHREAD=0\n"
"\n"
"When Google Test uses pthread, you may need to add flags to your compiler and/or\n"
"linker to select the pthread library, or you'll get link errors. If you use the\n"
"CMake script, this is taken care of for you. If you use your own build script,\n"
"you'll need to read your compiler and linker's manual to figure out what flags\n"
"to add.\n"
"\n"
"### As a Shared Library (DLL)\n"
"\n"
"Google Test is compact, so most users can build and link it as a static library\n"
"for the simplicity. You can choose to use Google Test as a shared library (known\n"
"as a DLL on Windows) if you prefer.\n"
"\n"
"To compile *gtest* as a shared library, add\n"
"\n"
"    -DGTEST_CREATE_SHARED_LIBRARY=1\n"
"\n"
"to the compiler flags. You'll also need to tell the linker to produce a shared\n"
"library instead - consult your linker's manual for how to do it.\n"
"\n"
"To compile your *tests* that use the gtest shared library, add\n"
"\n"
"    -DGTEST_LINKED_AS_SHARED_LIBRARY=1\n"
"\n"
"to the compiler flags.\n"
"\n"
"Note: while the above steps aren't technically necessary today when using some\n"
"compilers (e.g. GCC), they may become necessary in the future, if we decide to\n"
"improve the speed of loading the library (see\n"
"<http://gcc.gnu.org/wiki/Visibility> for details). Therefore you are recommended\n"
"to always add the above flags when using Google Test as a shared library.\n"
"Otherwise a future release of Google Test may break your build script.\n"
"\n"
"### Avoiding Macro Name Clashes\n"
"\n"
"In C++, macros don't obey namespaces. Therefore two libraries that both define a\n"
"macro of the same name will clash if you `#include` both definitions. In case a\n"
"Google Test macro clashes with another library, you can force Google Test to\n"
"rename its macro to avoid the conflict.\n"
"\n"
"Specifically, if both Google Test and some other code define macro FOO, you can\n"
"add\n"
"\n"
"    -DGTEST_DONT_DEFINE_FOO=1\n"
"\n"
"to the compiler flags to tell Google Test to change the macro's name from `FOO`\n"
"to `GTEST_FOO`. Currently `FOO` can be `FAIL`, `SUCCEED`, or `TEST`. For\n"
"example, with `-DGTEST_DONT_DEFINE_TEST=1`, you'll need to write\n"
"\n"
"    GTEST_TEST(SomeTest, DoesThis) { ... }\n"
"\n"
"instead of\n"
"\n"
"    TEST(SomeTest, DoesThis) { ... }\n"
"\n"
"in order to define a test.\n";

const char* README_md2 = (const char*) temp_binary_data_4;


const char* getNamedResource (const char* resourceNameUTF8, int& numBytes)
{
    unsigned int hash = 0;

    if (resourceNameUTF8 != nullptr)
        while (*resourceNameUTF8 != 0)
            hash = 31 * hash + (unsigned int) *resourceNameUTF8++;

    switch (hash)
    {
        case 0x64791dc8:  numBytes = 1682; return README_md;
        case 0x90e15cf5:  numBytes = 12314; return CMakeLists_txt;
        case 0xdc22a2f8:  numBytes = 1408; return CONTRIBUTORS;
        case 0x34bc1021:  numBytes = 1475; return LICENSE;
        case 0x2aaa9b6a:  numBytes = 9886; return README_md2;
        default: break;
    }

    numBytes = 0;
    return nullptr;
}

const char* namedResourceList[] =
{
    "README_md",
    "CMakeLists_txt",
    "CONTRIBUTORS",
    "LICENSE",
    "README_md2"
};

const char* originalFilenames[] =
{
    "README.md",
    "CMakeLists.txt",
    "CONTRIBUTORS",
    "LICENSE",
    "README.md"
};

const char* getNamedResourceOriginalFilename (const char* resourceNameUTF8)
{
    for (unsigned int i = 0; i < (sizeof (namedResourceList) / sizeof (namedResourceList[0])); ++i)
    {
        if (namedResourceList[i] == resourceNameUTF8)
            return originalFilenames[i];
    }

    return nullptr;
}

}
